)
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "binary") %>%
mutate(anchor = ifelse(item1_anchor == "low", -1, 1)) %>%
glm(item1_choice_higher_preference ~ anchor, ., family = binomial(link="logit")) %>%
summary()
# Binary Choice: Binary - Binary
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "binary") %>%
group_by(item1_anchor) %>%
# get_summary_stats(item1_choice_higher_preference, type=c("mean")) %>%
summarise(n = n(), mean = mean(item1_choice_higher_preference)) %>%
kbl(digits=4) %>%
kable_styling()
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "binary") %>%
ungroup() %>%
summarise(
chi2 = round(summary(xtabs(~item1_choice_higher_preference+item1_anchor, .))$statistic, 2),
p_val = round(summary(xtabs(~item1_choice_higher_preference+item1_anchor, .))$p.value, 3),
cr_v = round(cramer_v(xtabs(~item1_choice_higher_preference+item1_anchor, .)), 3)
)
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
group_by(item1_anchor) %>%
# get_summary_stats(item1_choice_higher_preference, type=c("mean")) %>%
summarise(n = n(), mean = mean(item1_choice_higher_preference)) %>%
kbl(digits=4) %>%
kable_styling()
dat_no_outlier %>%
filter(choice_type == "continuous" & wtp_type == "continuous") %>%
ungroup() %>%
summarise(
chi2 = round(summary(xtabs(~item1_choice_higher_preference+item1_anchor, .))$statistic, 2),
p_val = round(summary(xtabs(~item1_choice_higher_preference+item1_anchor, .))$p.value, 3),
cr_v = round(cramer_v(xtabs(~item1_choice_higher_preference+item1_anchor, .)), 2)
)
# Continuous Choice: binary-continuous
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "continuous") %>%
group_by(wtp_type, item1_anchor) %>%
# get_summary_stats(item1_choice_higher_preference, type=c("mean")) %>%
summarise(n = n(), mean = mean(item1_choice_higher_preference)) %>%
kbl(digits=4) %>%
kable_styling()
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "continuous") %>%
ungroup() %>%
summarise(
chi2 = round(summary(xtabs(~item1_choice_higher_preference+item1_anchor, .))$statistic, 2),
p_val = round(summary(xtabs(~item1_choice_higher_preference+item1_anchor, .))$p.value, 3),
cr_v = round(cramer_v(xtabs(~item1_choice_higher_preference+item1_anchor, .)), 4)
)
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
group_by(item1_anchor) %>%
get_summary_stats(item1_choice_cont, type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
# t-test
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
ungroup() %>%
summarise(
t_val = round(t.test(item1_choice_cont ~ item1_anchor, ., var.equal=T)$statistic, 2),
p_val = round(t.test(item1_choice_cont ~ item1_anchor, ., var.equal=T)$p.value, 3),
df = round(t.test(item1_choice_cont ~ item1_anchor, ., var.equal=T)$parameter, 3),
cohens_d = round(effectsize(t.test(item1_choice_cont ~ item1_anchor, ., var.equal=T))$d, 3),
confint_low = round(t.test(item1_choice_cont ~ item1_anchor, var.equal=T)$conf.int[1], 2),
confint_high = round(t.test(item1_choice_cont ~ item1_anchor, var.equal=T)$conf.int[2], 2)
) %>%
kbl() %>%
kable_styling()
# Binary - Continuous
# descriptive statistic
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "continuous") %>%
group_by(item1_anchor) %>%
get_summary_stats(item1_choice_cont, type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
# t-test
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "continuous") %>%
ungroup() %>%
summarise(
t_val = round(t.test(item1_choice_cont ~ item1_anchor, ., var.equal=T)$statistic, 2),
p_val = round(t.test(item1_choice_cont ~ item1_anchor, ., var.equal=T)$p.value, 3),
df = round(t.test(item1_choice_cont ~ item1_anchor, ., var.equal=T)$parameter, 3),
cohens_d = round(effectsize(t.test(item1_choice_cont ~ item1_anchor, ., var.equal=T))$d, 3),
confint_low = round(t.test(item1_choice_cont ~ item1_anchor, var.equal=T)$conf.int[1], 2),
confint_high = round(t.test(item1_choice_cont ~ item1_anchor, var.equal=T)$conf.int[2], 2)
) %>%
kbl() %>%
kable_styling()
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
group_by(item2_anchor) %>%
get_summary_stats(item2_choice_cont, type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
# t-test
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
ungroup() %>%
summarise(
t_val = round(t.test(item2_choice_cont ~ item2_anchor, ., var.equal=T)$statistic, 2),
p_val = round(t.test(item2_choice_cont ~ item2_anchor, ., var.equal=T)$p.value, 3),
df = round(t.test(item2_choice_cont ~ item2_anchor, ., var.equal=T)$parameter, 3),
cohens_d = round(effectsize(t.test(item2_choice_cont ~ item2_anchor, ., var.equal=T))$d, 3),
confint_low = round(t.test(item2_choice_cont ~ item2_anchor, var.equal=T)$conf.int[1], 2),
confint_high = round(t.test(item2_choice_cont ~ item2_anchor, var.equal=T)$conf.int[2], 2)
) %>%
kbl() %>%
kable_styling()
# Binary - Continuous
# descriptive statistics
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "continuous") %>%
group_by(item2_anchor) %>%
get_summary_stats(item2_choice_cont, type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
# t-test
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "continuous") %>%
ungroup() %>%
summarise(
t_val = round(t.test(item2_choice_cont ~ item2_anchor, ., var.equal=T)$statistic, 2),
p_val = round(t.test(item2_choice_cont ~ item2_anchor, ., var.equal=T)$p.value, 3),
df = round(t.test(item2_choice_cont ~ item2_anchor, ., var.equal=T)$parameter, 3),
cohens_d = round(effectsize(t.test(item2_choice_cont ~ item2_anchor, ., var.equal=T))$d, 3),
confint_low = round(t.test(item2_choice_cont ~ item2_anchor, var.equal=T)$conf.int[1], 2),
confint_high = round(t.test(item2_choice_cont ~ item2_anchor, var.equal=T)$conf.int[2], 2)
) %>%
kbl() %>%
kable_styling()
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
group_by(item1_anchor) %>%
# get_summary_stats(item1_choice_higher_preference, type=c("mean")) %>%
summarise(n = n(), mean = mean(item1_choice_higher_preference)) %>%
kbl(digits=4) %>%
kable_styling()
dat_no_outlier %>%
filter(choice_type == "continuous" & wtp_type == "continuous") %>%
ungroup() %>%
summarise(
chi2 = round(summary(xtabs(~item1_choice_higher_preference+item1_anchor, .))$statistic, 2),
p_val = round(summary(xtabs(~item1_choice_higher_preference+item1_anchor, .))$p.value, 3),
cr_v = round(cramer_v(xtabs(~item1_choice_higher_preference+item1_anchor, .)), 2)
)
# Continuous Choice: binary-continuous
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "continuous") %>%
group_by(wtp_type, item1_anchor) %>%
# get_summary_stats(item1_choice_higher_preference, type=c("mean")) %>%
summarise(n = n(), mean = mean(item1_choice_higher_preference)) %>%
kbl(digits=4) %>%
kable_styling()
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "continuous") %>%
ungroup() %>%
summarise(
chi2 = round(summary(xtabs(~item1_choice_higher_preference+item1_anchor, .))$statistic, 2),
p_val = round(summary(xtabs(~item1_choice_higher_preference+item1_anchor, .))$p.value, 3),
cr_v = round(cramer_v(xtabs(~item1_choice_higher_preference+item1_anchor, .)), 4)
)
# Continuous - Continuous
# Descriptive Statistics
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
get_summary_stats(c(choice_high_anchor, choice_low_anchor), type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
with(subset(dat_no_outlier, wtp_type == "continuous" & choice_type == "continuous"), t.test(choice_high_anchor, choice_low_anchor, paired=TRUE))
mean_diff <- mean(dat_no_outlier$choice_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$choice_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"])
# Calculate standard deviation of differences
sd_diff <- sd(dat_no_outlier$choice_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$choice_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"])
# Calculate Cohen's d
cohens_d <- mean_diff / sd_diff
print(paste("Cohen's d:", round(cohens_d, 3)))
# Binary - Continuous
# Descriptive Statistics
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "continuous") %>%
get_summary_stats(c(choice_high_anchor, choice_low_anchor), type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
with(subset(dat_no_outlier, wtp_type == "binary" & choice_type == "continuous"), t.test(choice_high_anchor, choice_low_anchor, paired=TRUE))
mean_diff <- mean(dat_no_outlier$choice_high_anchor[dat_no_outlier$wtp_type == "binary" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$choice_low_anchor[dat_no_outlier$wtp_type == "binary" & dat_no_outlier$choice_type == "continuous"])
# Calculate standard deviation of differences
sd_diff <- sd(dat_no_outlier$choice_high_anchor[dat_no_outlier$wtp_type == "binary" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$choice_low_anchor[dat_no_outlier$wtp_type == "binary" & dat_no_outlier$choice_type == "continuous"])
# Calculate Cohen's d
cohens_d <- mean_diff / sd_diff
print(paste("Cohen's d:", round(cohens_d, 3)))
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
get_summary_stats(c(choice_high_anchor, choice_low_anchor), type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
with(subset(dat_no_outlier, wtp_type == "continuous" & choice_type == "continuous"), t.test(choice_high_anchor, choice_low_anchor, paired=TRUE))
mean_diff <- mean(dat_no_outlier$choice_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$choice_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"])
# Calculate standard deviation of differences
sd_diff <- sd(dat_no_outlier$choice_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$choice_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"])
# Calculate Cohen's d
cohens_d <- mean_diff / sd_diff
print(paste("Cohen's d:", round(cohens_d, 3)))
dat_no_outlier %>%
filter(wtp_type == "binary" & choice_type == "continuous") %>%
get_summary_stats(c(choice_high_anchor, choice_low_anchor), type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
with(subset(dat_no_outlier, wtp_type == "binary" & choice_type == "continuous"), t.test(choice_high_anchor, choice_low_anchor, paired=TRUE))
mean_diff <- mean(dat_no_outlier$choice_high_anchor[dat_no_outlier$wtp_type == "binary" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$choice_low_anchor[dat_no_outlier$wtp_type == "binary" & dat_no_outlier$choice_type == "continuous"])
# Calculate standard deviation of differences
sd_diff <- sd(dat_no_outlier$choice_high_anchor[dat_no_outlier$wtp_type == "binary" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$choice_low_anchor[dat_no_outlier$wtp_type == "binary" & dat_no_outlier$choice_type == "continuous"])
# Calculate Cohen's d
cohens_d <- mean_diff / sd_diff
print(paste("Cohen's d:", round(cohens_d, 3)))
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
get_summary_stats(c(wtp_high_anchor, wtp_low_anchor), type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
# paired-sample t-test
with(subset(dat_no_outlier, wtp_type == "continuous" & choice_type == "continuous"), t.test(wtp_high_anchor, wtp_low_anchor, paired=TRUE))
# effect size
mean_diff <- mean(dat_no_outlier$wtp_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$wtp_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"])
sd_diff <- sd(dat_no_outlier$wtp_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$wtp_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"])
# Calculate Cohen's d
cohens_d <- mean_diff / sd_diff
print(paste("Cohen's d:", round(cohens_d, 3)))
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
get_summary_stats(c(choice_high_anchor, choice_low_anchor), type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
with(subset(dat_no_outlier, wtp_type == "continuous" & choice_type == "continuous"), t.test(choice_high_anchor, choice_low_anchor, paired=TRUE))
mean_diff <- mean(dat_no_outlier$choice_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$choice_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"])
# Calculate standard deviation of differences
sd_diff <- sd(dat_no_outlier$choice_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$choice_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"])
# Calculate Cohen's d
cohens_d <- mean_diff / sd_diff
print(paste("Cohen's d:", round(cohens_d, 3)))
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "continuous") %>%
get_summary_stats(c(wtp_high_anchor, wtp_low_anchor), type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
# paired-sample t-test
with(subset(dat_no_outlier, wtp_type == "continuous" & choice_type == "continuous"), t.test(wtp_high_anchor, wtp_low_anchor, paired=TRUE))
# effect size
mean_diff <- mean(dat_no_outlier$wtp_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$wtp_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"])
sd_diff <- sd(dat_no_outlier$wtp_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"] -
dat_no_outlier$wtp_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "continuous"])
# Calculate Cohen's d
cohens_d <- mean_diff / sd_diff
print(paste("Cohen's d:", round(cohens_d, 3)))
dat_no_outlier %>%
filter(wtp_type == "continuous" & choice_type == "binary") %>%
get_summary_stats(c(wtp_high_anchor, wtp_low_anchor), type=c("mean_sd")) %>%
kbl(digits=2) %>%
kable_styling()
# paired-sample t-test
with(subset(dat_no_outlier, wtp_type == "continuous" & choice_type == "binary"), t.test(wtp_high_anchor, wtp_low_anchor, paired=TRUE))
# effect size
mean_diff <- mean(dat_no_outlier$wtp_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "binary"] -
dat_no_outlier$wtp_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "binary"])
sd_diff <- sd(dat_no_outlier$wtp_high_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "binary"] -
dat_no_outlier$wtp_low_anchor[dat_no_outlier$wtp_type == "continuous" & dat_no_outlier$choice_type == "binary"])
# Calculate Cohen's d
cohens_d <- mean_diff / sd_diff
print(paste("Cohen's d:", round(cohens_d, 3)))
install.packages(c("admisc", "bit", "cluster", "cpp11", "data.table", "ggeffects", "gtsummary", "Hmisc", "igraph", "later", "lubridate", "parallelly", "parameters", "promises", "RcppArmadillo", "sjPlot", "terra", "textshaping"))
install.packages(c("cluster", "effectsize", "terra", "testthat"))
install.packages(c("BH", "parallelly", "pillar", "psych", "survival"))
install.packages(c("broom.helpers", "class", "collapse", "curl", "datawizard", "evaluate", "foreign", "ggstats", "Hmisc", "igraph", "inline", "insight", "KernSmooth", "labelled", "lme4", "MASS", "MatchIt", "matrixStats", "mvtnorm", "nnet", "openssl", "pillar", "processx", "QuickJSR", "Rcpp", "rpart", "spatial", "terra", "testthat", "xfun", "XML"))
install.packages(c("evaluate", "foreign", "Hmisc", "igraph", "lme4", "MatchIt", "parameters", "performance", "Rcpp", "terra", "testthat"))
install.packages(c("bayestestR", "bit64", "ggeffects", "gld", "igraph", "pkgbuild", "plm", "raster", "rlang", "systemfonts", "textshaping", "TH.data"))
install.packages(c("bayestestR", "ggeffects", "gld", "igraph", "plm", "rlang", "see", "systemfonts", "textshaping", "TH.data"))
install.packages(c("bayestestR", "chk", "curl", "ggeffects", "gld", "igraph", "Matrix", "openxlsx", "plm", "qvcalc", "RcppParallel", "rlang", "see", "systemfonts", "terra", "textshaping", "TH.data"))
install.packages(c("bayestestR", "chk", "curl", "DescTools", "ggeffects", "gld", "igraph", "Matrix", "metafor", "multcomp", "nlme", "openxlsx", "plm", "qvcalc", "RcppParallel", "report", "rlang", "see", "systemfonts", "terra", "textshaping", "TH.data"))
install.packages("openai")
library(openai)
Sys.setenv(
OPENAI_API_KEY = 'sk-AIzaSyDr1pDr1l_0s9sZewe2KAWzAMJ94SyFz4Q'
)
answer = create_chat_completion(
model = "gemini-pro",
temperature = 0,
messages = list(
list(
"role" = "system",
"content" = "You are a professional translator that help me translate into other languages."
),
list(
"role" = "user",
"content" = "Please translate this text in to French: I invite you to come to my birthday party on 23 of april, let me know if you can make it!"
)
)
)
install.packages(c("bayestestR", "broom.helpers", "bslib", "doBy", "emmeans", "multcomp", "parallelly", "quantreg", "see"))
install.packages("tidyplots")
library(tidyplots)
install.packages(c("bayestestR", "marginaleffects", "see", "sp", "zip"))
library(tidyplots)
install.packages(c("bayestestR", "cli", "easystats", "ggeffects", "insight", "metadat", "modelbased", "openssl", "purrr", "R6", "RcppArmadillo", "report", "see", "terra", "V8"))
library(tidyplots)
animals
dat <- animals
View(dat)
dat %>% tidyplot(x = size, y = weight)
dat %>% tidyplot(x = size, y = weight) %>% add_data_points()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_line()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_curve_fit()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_annotation_line()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_line(preserve = "fit")
?add_line
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% abline(lm(dat$weight ~ dat$size))
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() + abline(lm(dat$weight ~ dat$size))
a <- dat %>% tidyplot(x = size, y = weight) %>% add_data_points()
a
abline(lm(dat$weight ~ dat$size))
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% fit_line()
library(tidyverse)
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% fit_line()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% fit_line(method = "lm")
?tidyplots
ggplot(aes(x = "size", y = "weight"))
library(ggplot2)
dat %>% ggplot(aes(x = "size", y = "weight"))
dat %>% ggplot(aes(x = "size", y = "weight")) %>% add_data_points()
dat %>% ggplot(aes(x = "size", y = "weight")) %>% geom_point()
ggplot(dat, aes(x = size, y = weight))
ggplot(dat, aes(x = size, y = weight)) + geom_point()
ggplot(dat, aes(x = size, y = weight)) + geom_point() + geom_smooth(method = "lm")
ggplot(dat, aes(x = size, y = weight)) + geom_point() + geom_smooth(method = "lm", color= "blue")
ggplot(dat, aes(x = size, y = weight)) + geom_point()
ggplot(dat, aes(x = size, y = weight)) + geom_point() + geom_abline(method = "lm")
ggplot(dat, aes(x = size, y = weight)) + geom_point() + geom_abline()
ggplot(dat, aes(x = size, y = weight)) + geom_point() + geom_abline() + theme("tidyplots")
ggplot(dat, aes(x = size, y = weight)) + geom_point() + geom_abline() + theme_tidplots()
ggplot(dat, aes(x = size, y = weight)) + geom_point() + geom_abline() + theme_bw()
ggplot(dat, aes(x = size, y = weight)) + geom_point() + geom_abline() + theme_light()
tidyplot(x = size, y = weight)
dat %>% tidyplot(x = size, y = weight)
dat %>% tidyplot(x = size, y = weight) %>% add_data_points()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_line()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% line()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% abline()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_mean_line()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_mean_line()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_mean_line()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_median_line()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_total_line()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_tally()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_area()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% add_boxplot()
dat %>% tidyplot(x = size, y = weight) %>% add_data_points() %>% addmargins()
install.packages(c("cards", "curl", "gtsummary", "jsonlite", "ps", "tinytex", "xfun"))
install.packages(c("cards", "correlation", "cpp11", "curl", "data.table", "estimatr", "gtsummary", "insight", "jsonlite", "MASS", "pander", "parameters", "posterior", "processx", "ps", "QuickJSR", "R.utils", "readxl", "reticulate", "terra", "tinytex", "WeightIt", "xfun", "xml2", "zoo"))
install.packages(c("bit", "broom.helpers", "datawizard", "RcppTOML", "readxl", "tidyplots", "units"))
install.packages(c("commonmark", "curl", "datawizard", "emmeans", "gifski", "Hmisc", "hypergeo", "jpeg", "knitr", "markdown", "mime", "nloptr", "parallelly", "pkgbuild", "psych", "RcppArmadillo", "Rdpack", "sf", "tzdb", "V8", "writexl", "xml2"))
install.packages(c("foreign", "lme4", "MatrixModels", "reticulate", "sf", "V8"))
install.packages(c("admisc", "broom", "DescTools", "foreign", "gdtools", "jsonlite", "marginaleffects", "nlme", "QuickJSR", "raster", "RcppArmadillo", "stringi"))
install.packages(c("bigD", "gt", "lattice", "mgcv", "MuMIn", "pillar", "plm", "systemfonts", "terra", "xfun"))
set.seed(04092025)
n_participants <- 800
# Randomly select 5 numbers from 1 to 800
random_numbers <- sample(1:n_participants, 5)
random_numbers
paste("The first winner is :", random_numbers[1])
paste("The two winners for purchase are :", random_numbers[1, 2])
paste("The two winners for purchase are :", random_numbers[1], random_numbers[2])
n_participants <- 800
# Randomly select 5 numbers from 1 to 800
random_numbers <- sample(1:n_participants, 5)
# The two winner for purchase
paste("The two winners for purchase are :", random_numbers[1], random_numbers[2])
# The three winners for prize selection
paste("The three winners for prize selection are :", random_numbers[3], random_numbers[4], random_numbers[5])
purchase_type <- sample(c("WTB", "WTP"), 1, prob = c(0.5, 0.5))
paste("The Item will be sold based on ", purchase_type)
select_row <- sample(c(1:10), 1)
select_column <- sample(c(1:10), 1)
paste("The selected coordinate is ", select_row, select_column)
select_row <- sample(c(1:10), 1)
select_column <- sample(c(1:10), 1)
paste("The selected coordinate is '", select_row, select_column, "'")
paste("The selected row is ", select_row, " and the selected column is ", select_column)
random_price_selection_tie <- sample(c("Signature", "POP"), 1)
paste("As the rating scores were tie, ", random_price_selection_tie, " will be awarded to the winner")
paste("As the rating scores were tie, the ", random_price_selection_tie, " mouse will be awarded to the winner")
install.packages(c("bayesplot", "cards", "cobalt", "collapse", "doBy", "fs", "future", "ggplot2", "globals", "GPArotation", "gt", "gtsummary", "httpuv", "later", "litedown", "pillar", "ps", "ragg", "Rdpack", "remote", "rlang", "sass", "tinytex", "writexl", "zoo"))
install.packages(c("broom.helpers", "cli", "diffobj", "insight", "scales"))
install.packages(c("bayestestR", "pbkrtest", "RcppArmadillo"))
install.packages(c("collections", "emmeans", "globals", "labelled", "mathjaxr", "modelbased", "parallelly", "parameters", "R.cache", "R.oo", "reformulas", "rpf", "svglite", "systemfonts", "targets", "textshaping", "utf8"))
install.packages(c("bayestestR", "doBy", "insight"))
library(car)  # for Anova() function
# Set seed for reproducibility
set.seed(123)
# Create simulated dataset with 2 IVs, each with 2 levels
n_per_group <- 20
total_n <- n_per_group * 4
# Create the dataset
data <- data.frame(
# IV1: Treatment (Control vs Therapy)
treatment = rep(c("Control", "Therapy"), each = n_per_group * 2),
# IV2: Gender (Male vs Female)
gender = rep(c("Male", "Female"), times = n_per_group * 2),
# Create group means with main effects and interaction
# Control-Male: 10, Control-Female: 12, Therapy-Male: 15, Therapy-Female: 20
group_id = rep(1:4, each = n_per_group)
)
# Generate outcome variable with group differences and random error
group_means <- c(10, 12, 15, 20)  # Control-Male, Control-Female, Therapy-Male, Therapy-Female
data$outcome <- group_means[data$group_id] + rnorm(total_n, 0, 2)
# Check group means
print("Group means:")
aggregate(outcome ~ treatment + gender, data, mean)
print("\nMarginal means:")
print("Treatment marginal means:")
aggregate(outcome ~ treatment, data, mean)
print("Gender marginal means:")
aggregate(outcome ~ gender, data, mean)
print("Grand mean:")
mean(data$outcome)
cat("\n", "="*60, "\n")
data$treatment_dummy <- ifelse(data$treatment == "Therapy", 1, 0)  # 0=Control, 1=Therapy
data$gender_dummy <- ifelse(data$gender == "Female", 1, 0)         # 0=Male, 1=Female
model_dummy <- lm(outcome ~ treatment_dummy * gender_dummy, data = data)
cat("\nRegression coefficients (Dummy coding):\n")
print(summary(model_dummy)$coefficients)
Anova(model_dummy)
summary(aov(outcome ~ treat_dummy * gender_summy, data=data))
summary(aov(outcome ~ treatment_dummy * gender_summy, data=data))
summary(aov(outcome ~ treatment_dummy * gender_dummy, data=data))
data$treatment_effect <- ifelse(data$treatment == "Therapy", 1, -1)  # -1=Control, 1=Therapy
data$gender_effect <- ifelse(data$gender == "Female", 1, -1)         # -1=Male, 1=Female
# Fit model with effect coding
model_effect <- lm(outcome ~ treatment_effect * gender_effect, data = data)
print(summary(model_effect)$coefficients)
anova_effect <- Anova(model_effect, type = "II")
print(anova_effect)
emmeans(model_effect, ~treatment_effect | gender_effect, adjust="tukey")
library(emmeans)
install.packages("emmeans")
library(emmeans)
emmeans(model_effect, ~treatment_effect | gender_effect, adjust="tukey")
emmeans(model_effect,pairwise~treatment_effect | gender_effect, adjust="tukey")
emmeans(model_dummy,pairwise~treatment_dummy | gender_dummy, adjust="tukey")
install.packages(c("curl", "data.table", "effectsize", "OpenMx", "openssl", "parameters", "performance"))
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(dplyr)
library(ggplot2)
library(emmeans)
library(tidyverse)
library(effectsize)
library(lsr)
library(rstatix)
library(parameters)
library(kableExtra)
library(lme4)
library(lmerTest)
#library(tigerstats)
install.packages(c("curl", "future", "haven", "marginaleffects", "mediation", "parallelly", "tibble", "utf8", "V8"))
pwd
install.packages(c("data.table", "evaluate", "ggeffects", "merDeriv", "RUnit", "sjstats"))
install.packages(c("bayestestR", "cards", "commonmark", "cowplot", "curl", "data.table", "Deriv", "doBy", "ggpubr", "gtsummary", "insight", "marginaleffects", "parameters", "patchwork", "performance", "pillar", "psych", "purrr", "Rcpp", "sjPlot", "tidyplots"))
install.packages(c("CompQuadForm", "datawizard", "emmeans", "purrr", "rprojroot", "sjPlot"))
install.packages(c("datawizard", "pbapply", "pbkrtest"))
install.packages(c("broom", "parallelly", "pbapply", "pbkrtest"))
install.packages(c("future", "sjmisc", "V8"))
install.packages(c("Cairo", "checkmate", "collections", "curl", "ggeffects", "insight", "OpenMx", "parameters", "V8", "xfun", "XML", "xml2"))
install.packages("XML")
install.packages("XML")
install.packages(c("bayestestR", "boot", "cards", "emmeans", "evaluate", "gargle", "googlesheets4", "gtsummary", "insight", "marginaleffects", "Matrix", "mi", "parameters", "patchwork", "performance", "ragg", "RcppParallel", "roxygen2", "rprojroot", "rvest", "semPlot", "stringr", "textshaping", "V8", "visNetwork", "XML"))
setwd("/users/sangsuk/Documents/personal_website/ssyoon.github.io")
rmarkdown::render_site()
setwd("/users/sangsuk/Documents/personal_website/ssyoon.github.io")
rmarkdown::render_site()
setwd("/users/sangsuk/Documents/personal_website/ssyoon.github.io")
rmarkdown::render_site()
setwd("/users/sangsuk/Documents/personal_website/ssyoon.github.io")
rmarkdown::render_site()
setwd("/users/sangsuk/Documents/personal_website/ssyoon.github.io")
rmarkdown::render_site()
setwd("/users/sangsuk/Documents/personal_website/ssyoon.github.io")
rmarkdown::render_site()
setwd("/users/sangsuk/Documents/personal_website/ssyoon.github.io")
rmarkdown::render_site()
setwd("/users/sangsuk/Documents/personal_website/ssyoon.github.io")
rmarkdown::render_site()
setwd("/users/sangsuk/Documents/personal_website/ssyoon.github.io")
rmarkdown::render_site()
